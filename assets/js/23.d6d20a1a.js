(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{521:function(n,t,e){"use strict";e.r(t);var o=e(11),s=Object(o.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[e("em",[n._v("mixin是为了让可复用的功能灵活的混入到当前组件中，混合的对象可以包含任意组件选项（生命周期，指令之类等等）, mixin翻译过来叫混合,高级的词汇可以叫插件入侵")])]),n._v(" "),e("h1",{attrs:{id:"_1-简单使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-简单使用"}},[n._v("#")]),n._v(" 1. 简单使用")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 定义一个混合对象\nconst myMixin = {\n    created: function () {\n        this.hello()\n    },\n    methods: {\n        hello: function () {\n            console.log('JS 每日一题')\n        }\n    }\n}\n// 定义一个使用混合对象的组件\nconst Component = Vue.extend({\n    mixins: [myMixin]\n})\nvar component = new Component() // JS 每日一题\n")])])]),e("h1",{attrs:{id:"_2-选项合并-优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-选项合并-优先级"}},[n._v("#")]),n._v(" 2. 选项合并(优先级)")]),n._v(" "),e("p",[n._v("当组件和混合对象含有同名选项时,选项会按照规则进行合并")]),n._v(" "),e("p",[n._v("代码理解")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const mixin = {\n    created: function () {\n        console.log('混合对象的钩子被调用')\n    }\n}\nnew Vue({\n    mixins: [mixin],\n    created: function() {\n        console.log('组件钩子被调用')\n    }\n})\n// => \"混合对象的钩子被调用\"\n// => \"组件钩子被调用\"\n// 从上面的代码我们可以看出来混合对象的生命周期会被先调用\n")])])]),e("p",[n._v("值为对象的选项，例如 methods, components 和 directives，将被混合为同一个对象。两个对象键名冲突时，取组件对象的键值对,Vue.extend() 也使用同样的策略进行合并。")]),n._v(" "),e("p",[n._v("代码理解")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const mixin = {\n    methods: {\n        foo: function () {\n            console.log('foo')\n        },\n        conflicting: function () {\n            console.log('from mixin')\n        }\n    }\n}\nconst vm = new Vue({\n    mixins: [mixin],\n    methods: {\n        bar: function () {\n            console.log('bar')\n        },\n        conflicting: function () {\n            console.log('from self')\n        }\n    }\n})\nvm.foo() // => \"foo\"\nvm.bar() // => \"bar\"\nvm.conflicting() // => \"from self\"\n")])])]),e("h1",{attrs:{id:"_3-全局混合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-全局混合"}},[n._v("#")]),n._v(" 3. 全局混合")]),n._v(" "),e("p",[n._v("也可以全局注册混合对象。注意使用！ 一旦使用全局混合对象，将会影响到 所有 之后创建的 Vue 实例")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 为自定义的选项 'myOption' 注入一个处理器\nVue.mixin({\n    created: function () {\n        var myOption = this.$options.myOption\n        if (myOption) {\n            console.log(myOption)\n        }\n    }\n})\nnew Vue({\n    myOption: 'hello!'\n})\n// => \"hello!\"\n")])])]),e("p",[n._v("再了解了基本用法后再简单过一遍源码加深印象\n源码地址 https://github.com/vuejs/vue/blob/52719ccab8fccffbdf497b96d3731dc86f04c1ce/src/core/util/options.js#L365")]),n._v(" "),e("h1",{attrs:{id:"_4-总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结"}},[n._v("#")]),n._v(" 4. 总结")]),n._v(" "),e("p",[n._v("mixin就是采取一定规则将一个功能(组件)的属性混合到另一个组件或者全局当中，优点就是灵活度高，耦合度低，便于维护")])])}),[],!1,null,null,null);t.default=s.exports}}]);