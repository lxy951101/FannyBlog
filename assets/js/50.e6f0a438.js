(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{555:function(e,t,a){"use strict";a.r(t);var s=a(11),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("ul",[a("li",[a("p",[e._v("chaijs 一个单元测试的函数库\n")])]),e._v(" "),a("li",[a("p",[a("a",{attrs:{href:"#bdd"}},[e._v("BDD")])]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E8%AF%AD%E8%A8%80%E9%93%BE"}},[e._v("语言链")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#not"}},[e._v(".not")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#deep"}},[e._v(".deep")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#nested"}},[e._v(".nested")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#own"}},[e._v(".own")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#ordered"}},[e._v(".ordered")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#any"}},[e._v(".any")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#all"}},[e._v(".all")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#atypemsg"}},[e._v(".a(type[,msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#includevalmsg"}},[e._v(".include(val[,msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#ok"}},[e._v(".ok")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#true"}},[e._v(".true")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#false"}},[e._v(".false")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#null"}},[e._v(".null")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#undefined"}},[e._v(".undefined")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#nan"}},[e._v(".NaN")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#exist"}},[e._v(".exist")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#empty"}},[e._v(".empty")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#arguments"}},[e._v(".arguments")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#equalvalmsg"}},[e._v(".equal(val[,msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#eqlobjmsg"}},[e._v(".eql(obj[,msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#abovenmsg"}},[e._v(".above(n[,msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#leastnmsg"}},[e._v(".least(n[,msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#belown-msg"}},[e._v(".below(n[, msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#mostn-msg"}},[e._v(".most(n[, msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#withinstart-finish-msg"}},[e._v(".within(start, finish[, msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#instanceofconstructor-msg"}},[e._v(".instanceof(constructor[, msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#propertyname-val-msg"}},[e._v(".property(name[, val[, msg]])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#ownpropertydescriptorname-descriptor-msg"}},[e._v(".ownPropertyDescriptor(name[, descriptor[, msg]])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#lengthofn-msg"}},[e._v(".lengthOf(n[, msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#matchre-msg"}},[e._v(".match(re[, msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#stringstr-msg"}},[e._v(".string(str[, msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#keyskey1-key2-"}},[e._v(".keys(key1[, key2[, …]])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#throwerrorlike-errmsgmatcher-msg"}},[e._v(".throw([errorLike], [errMsgMatcher], [msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#respondtomethod-msg"}},[e._v(".respondTo(method[, msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#itself"}},[e._v(".itself")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#satisfymatcher-msg"}},[e._v(".satisfy(matcher[, msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#closetoexpected-delta-msg"}},[e._v(".closeTo(expected, delta[, msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#membersset-msg"}},[e._v(".members(set[, msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#oneoflist-msg"}},[e._v(".oneOf(list[, msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#changesubject-prop-msg"}},[e._v(".change(subject[, prop[, msg]])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#increasesubject-prop-msg"}},[e._v(".increase(subject[, prop[, msg]])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#decreasesubject-prop-msg"}},[e._v(".decrease(subject[, prop[, msg]])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#bydelta-msg"}},[e._v(".by(delta[, msg])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#extensible"}},[e._v(".extensible")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#sealed"}},[e._v(".sealed")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#frozen"}},[e._v(".frozen")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#finite"}},[e._v(".finite")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#failmessage"}},[e._v(".fail([message])")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#failactual-expected-message-operator"}},[e._v(".fail(actual, expected, [message], [operator])")])])])])]),e._v(" "),a("h1",{attrs:{id:"bdd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bdd"}},[e._v("#")]),e._v(" BDD")]),e._v(" "),a("blockquote",[a("p",[e._v("BDD 模式使用 except 与 should。它们都使用相同的可链接语言来构造断言，但是它们在最初构造断言的方式上有所不同。")])]),e._v(" "),a("h2",{attrs:{id:"语言链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语言链"}},[e._v("#")]),e._v(" 语言链")]),e._v(" "),a("p",[e._v("下面的这些语言链可以提高断言的可读性")]),e._v(" "),a("p",[e._v(".to\n.be\n.been\n.is\n.that\n.which\n.and\n.has\n.have\n.with\n.at\n.of\n.same\n.but\n.does\n.still")]),e._v(" "),a("h2",{attrs:{id:"not"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#not"}},[e._v("#")]),e._v(" .not")]),e._v(" "),a("p",[e._v("否定链中的所有断言。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(function () {}).to.not.throw(); // 该方法不抛错\nexpect({a: 1}).to.not.have.property('b'); // 属性中不包含属性b\nexpect([1, 2]).to.be.an('array').that.does.not.include(3); // 是数组且不包含3\n")])])]),a("blockquote",[a("p",[e._v("仅仅因为您可以用.not 否定任何断言，并不意味着您应该这样做。能力越大，责任越大。通常，最好是断言产生了一个预期的输出，而不是断言没有产生无数个意外输出中的一个。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(2).to.equal(2); // 建议\nexpect(2).to.not.equal(1); // 不建议\n")])])]),a("h2",{attrs:{id:"deep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deep"}},[e._v("#")]),e._v(" .deep")]),e._v(" "),a("p",[e._v("使链中的所有.equal、.include、.members、.keys 和.property 断言使用深度相等而不是严格相等(===)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Target object deeply (but not strictly) equals `{a: 1}`\nexpect({a: 1}).to.deep.equal({a: 1});\nexpect({a: 1}).to.not.equal({a: 1});\n\n// Target array deeply (but not strictly) includes `{a: 1}`\nexpect([{a: 1}]).to.deep.include({a: 1});\nexpect([{a: 1}]).to.not.include({a: 1});\n\n// Target object deeply (but not strictly) includes `x: {a: 1}`\nexpect({x: {a: 1}}).to.deep.include({x: {a: 1}});\nexpect({x: {a: 1}}).to.not.include({x: {a: 1}});\n\n// Target array deeply (but not strictly) has member `{a: 1}`\nexpect([{a: 1}]).to.have.deep.members([{a: 1}]);\nexpect([{a: 1}]).to.not.have.members([{a: 1}]);\n\n// Target set deeply (but not strictly) has key `{a: 1}`\nexpect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\nexpect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n\n// Target object deeply (but not strictly) has property `x: {a: 1}`\nexpect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\nexpect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n")])])]),a("h2",{attrs:{id:"nested"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nested"}},[e._v("#")]),e._v(" .nested")]),e._v(" "),a("p",[e._v("在链中跟随的所有.property 和.include 断言中启用点和括号符号")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\nexpect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n")])])]),a("p",[e._v("如果.或[]是实际属性名称的一部分，可以通过在它们前面添加两个反斜杠来转义它们")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\nexpect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n")])])]),a("p",[e._v(".nested 不能结合 .own 使用")]),e._v(" "),a("h2",{attrs:{id:"own"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#own"}},[e._v("#")]),e._v(" .own")]),e._v(" "),a("p",[e._v("导致链中跟随的所有.property 和.include 断言忽略继承的属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Object.prototype.b = 2;\n\nexpect({a: 1}).to.have.own.property('a');\nexpect({a: 1}).to.have.property('b');\nexpect({a: 1}).to.not.have.own.property('b');\n\nexpect({a: 1}).to.own.include({a: 1});\nexpect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n")])])]),a("p",[e._v(".own 不可以与 .nested 结合使用")]),e._v(" "),a("h2",{attrs:{id:"ordered"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ordered"}},[e._v("#")]),e._v(" .ordered")]),e._v(" "),a("p",[e._v("导致链中跟随的所有.members 断言要求成员具有相同的顺序")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([1, 2]).to.have.ordered.members([1, 2])\n  .but.not.have.ordered.members([2, 1]);\n")])])]),a("p",[e._v("当.include 和.ordered 组合在一起时，顺序从两个数组的开头开始")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([1, 2, 3]).to.include.ordered.members([1, 2])\n  .but.not.include.ordered.members([2, 3]);\n")])])]),a("h2",{attrs:{id:"any"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#any"}},[e._v("#")]),e._v(" .any")]),e._v(" "),a("p",[e._v("导致链中跟随的所有.keys 断言只要求目标具有至少一个给定的键。这与.all 相反，.all 要求目标拥有所有给定的键")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n")])])]),a("h2",{attrs:{id:"all"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all"}},[e._v("#")]),e._v(" .all")]),e._v(" "),a("p",[e._v("导致链中跟随的所有.keys 断言要求目标具有所有给定的密钥。这与.any 相反，.any 只要求目标具有至少一个给定键")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n")])])]),a("blockquote",[a("p",[e._v("注意，当在链的前面添加.all 和.any 时，默认情况下使用.all。不过，通常最好还是添加.all，因为它提高了可读性")])]),e._v(" "),a("h2",{attrs:{id:"a-type-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-type-msg"}},[e._v("#")]),e._v(" .a(type[,msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { String } type")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("option")]),e._v("\n断言目标的类型")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foo').to.be.a('string');\nexpect({a: 1}).to.be.an('object');\nexpect(null).to.be.a('null');\nexpect(undefined).to.be.an('undefined');\nexpect(new Error).to.be.an('error');\nexpect(Promise.resolve()).to.be.a('promise');\nexpect(new Float32Array).to.be.a('float32array');\nexpect(Symbol()).to.be.a('symbol');\n")])])]),a("p",[e._v(".a 支持通过 Symbol.toStringTag 设置自定义类型的对象")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {\n  [Symbol.toStringTag]: 'myCustomType'\n};\n\nexpect(myObj).to.be.a('myCustomType').but.not.an('object');\n")])])]),a("p",[e._v("在对同一个目标进行更多断言之前，最好使用.a 检查目标的类型。这样，您就可以避免任何基于目标类型执行不同操作的断言的意外行为")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([1, 2, 3]).to.be.an('array').that.includes(2);\nexpect([]).to.be.an('array').that.is.empty;\n")])])]),a("p",[e._v("在链的前面加上 .not。然而，通常最好断言目标是预期的类型，而不是断言它不是许多意外类型之一")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foo').to.be.a('string'); // Recommended\nexpect('foo').to.not.be.an('array'); // Not recommended\n")])])]),a("p",[e._v(".a 接受一个可选的 msg 参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.be.a('string', 'nooo why fail??');\nexpect(1, 'nooo why fail??').to.be.a('string');\n")])])]),a("p",[e._v(".a 也可以用作语言链，以提高断言的可读性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({b: 2}).to.have.a.property('b');\n")])])]),a("p",[e._v("别名.an 可以与.a 互换使用")]),e._v(" "),a("h2",{attrs:{id:"include-val-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#include-val-msg"}},[e._v("#")]),e._v(" .include(val[,msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Mixed } val")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("当目标是一个字符串时，.include 断言给定的字符串 val 是目标的子字符串")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foobar').to.include('foo');\n")])])]),a("p",[e._v("当目标是一个数组时，.include 断言给定的 val 是目标的成员")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([1, 2, 3]).to.include(2);\n")])])]),a("p",[e._v("当目标是一个对象时，.include 断言给定对象 val 的属性是目标属性的子集")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n")])])]),a("p",[e._v("当目标是一个集或弱集时，.include 断言给定的 val 是目标的成员。采用 SameValueZero 等同性算法")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(new Set([1, 2])).to.include(2);\n")])])]),a("p",[e._v("当目标是映射时，.include 断言给定的 val 是目标的值之一。采用 SameValueZero 等同性算法")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n")])])]),a("p",[e._v("因为.include 根据目标的类型执行不同的操作，所以在使用.include 之前检查目标的类型非常重要")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([1, 2, 3]).to.be.an('array').that.includes(2)\n")])])]),a("p",[e._v("默认情况下，使用 strict(===)等式比较数组成员和对象属性。在链的早期添加.deep 来使用 deep 等式(不支持 WeakSet 目标)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Target array deeply (but not strictly) includes `{a: 1}`\nexpect([{a: 1}]).to.deep.include({a: 1});\nexpect([{a: 1}]).to.not.include({a: 1});\n\n// Target object deeply (but not strictly) includes `x: {a: 1}`\nexpect({x: {a: 1}}).to.deep.include({x: {a: 1}});\nexpect({x: {a: 1}}).to.not.include({x: {a: 1}});\n")])])]),a("p",[e._v("默认情况下，在处理对象时搜索目标的所有属性。这包括继承的和/或不可枚举的属性。在链的前面添加.own，以从搜索中排除目标的继承属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Object.prototype.b = 2;\n\nexpect({a: 1}).to.own.include({a: 1});\nexpect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n")])])]),a("blockquote",[a("p",[e._v("注意，目标对象始终只搜索 val 自己的可枚举属性")])]),e._v(" "),a("p",[e._v(".deep 与 .own 可以结合使用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n")])])]),a("p",[e._v("在链的前面添加.nested，以便在引用嵌套属性时启用点符号和括号符号")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n")])])]),a("p",[e._v("如果.或[]是实际属性名称的一部分，可以通过在它们前面添加两个反斜杠来转义它们")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n")])])]),a("p",[e._v(".deep 与 .nested 可以结合使用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n")])])]),a("blockquote",[a("p",[e._v(".own 与 .nested 不可以结合使用")])]),e._v(" "),a("p",[e._v("添加 .not 在链接中否定 .include")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foobar').to.not.include('taco');\nexpect([1, 2, 3]).to.not.include(4);\n")])])]),a("p",[e._v("然而，当目标是对象时，否定.include 是很危险的。问题是，它断言目标对象没有 val 的所有键/值对，但可能有也可能没有，从而产生了不确定的预期。通常，最好确定预期的确切输出，然后编写只接受该确切输出的断言")]),e._v(" "),a("p",[e._v("当目标对象甚至不期望具有 val 的键时，最好准确地断言它")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\nexpect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n")])])]),a("p",[e._v("当预期目标对象具有 val 的键时，通常最好断言每个属性都有其期望值，而不是断言每个属性没有许多未预料到的值之一")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\nexpect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n")])])]),a("p",[e._v(".include 接受一个可选的 msg 参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([1, 2, 3]).to.include(4, 'nooo why fail??');\nexpect([1, 2, 3], 'nooo why fail??').to.include(4);\n")])])]),a("p",[e._v(".include 也可以用作语言链，导致链中所有.members 和.keys 断言都要求目标是预期集的超集，而不是相同的集")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Target object's keys are a superset of ['a', 'b'] but not identical\nexpect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\nexpect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n\n// Target array is a superset of [1, 2] but not identical\nexpect([1, 2, 3]).to.include.members([1, 2]);\nexpect([1, 2, 3]).to.not.have.members([1, 2]);\n\n// Duplicates in the subset are ignored\nexpect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n")])])]),a("blockquote",[a("p",[e._v("注意，在链的前面添加.any 会导致.keys 断言忽略.include")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Both assertions are identical\nexpect({a: 1}).to.include.any.keys('a', 'b');\nexpect({a: 1}).to.have.any.keys('a', 'b');\n")])])]),a("blockquote",[a("p",[e._v("别名.includes,.contain,.contains 可以与.include 互换使用")])]),e._v(" "),a("h2",{attrs:{id:"ok"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ok"}},[e._v("#")]),e._v(" .ok")]),e._v(" "),a("p",[e._v("断言目标是一个 true 值(在布尔上下文中被认为是 true)。然而，通常最好断言目标是严格地(===)或完全等于它的期望值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.equal(1); // Recommended\nexpect(1).to.be.ok; // Not recommended\n\nexpect(true).to.be.true; // Recommended\nexpect(true).to.be.ok; // Not recommended\n")])])]),a("p",[e._v("在链上 .ok 前添加 .not 否定 .ok")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(0).to.equal(0); // Recommended\nexpect(0).to.not.be.ok; // Not recommended\n\nexpect(false).to.be.false; // Recommended\nexpect(false).to.not.be.ok; // Not recommended\n\nexpect(null).to.be.null; // Recommended\nexpect(null).to.not.be.ok; // Not recommended\n\nexpect(undefined).to.be.undefined; // Recommended\nexpect(undefined).to.not.be.ok; // Not recommended\n")])])]),a("p",[e._v("自定义错误消息可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(false, 'nooo why fail??').to.be.ok;\n")])])]),a("h2",{attrs:{id:"true"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#true"}},[e._v("#")]),e._v(" .true")]),e._v(" "),a("p",[e._v("断言目标严格地(===)等于true")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(true).to.be.true;\n")])])]),a("p",[e._v("在.true前添加.not。然而，通常最好断言目标等于它的期望值，而不是不等于true")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(false).to.be.false; // Recommended\nexpect(false).to.not.be.true; // Not recommended\n\nexpect(1).to.equal(1); // Recommended\nexpect(1).to.not.be.true; // Not recommended\n")])])]),a("p",[e._v("自定义错误消息可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(false, 'nooo why fail??').to.be.true;\n")])])]),a("h2",{attrs:{id:"false"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#false"}},[e._v("#")]),e._v(" .false")]),e._v(" "),a("p",[e._v("断言目标严格地(===)等于false")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(false).to.be.false;\n")])])]),a("p",[e._v("在 .false 前添加 .not 。然而，通常最好断言目标等于它的期望值，而不是不等于 false")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(true).to.be.true; // Recommended\nexpect(true).to.not.be.false; // Not recommended\n\nexpect(1).to.equal(1); // Recommended\nexpect(1).to.not.be.false; // Not recommended\n")])])]),a("p",[e._v("自定义错误消息可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(true, 'nooo why fail??').to.be.false;\n")])])]),a("h2",{attrs:{id:"null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[e._v("#")]),e._v(" .null")]),e._v(" "),a("p",[e._v("断言目标严格地(===)等于null")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(null).to.be.null;\n")])])]),a("p",[e._v("在 .null 前添加 .not 。然而，通常最好断言目标等于它的期望值，而不是不等于 null")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.equal(1); // Recommended\nexpect(1).to.not.be.null; // Not recommended\n")])])]),a("p",[e._v("自定义错误消息可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(42, 'nooo why fail??').to.be.null;\n")])])]),a("h2",{attrs:{id:"undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undefined"}},[e._v("#")]),e._v(" .undefined")]),e._v(" "),a("p",[e._v("断言目标严格地(===)等于undefined")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(undefined).to.be.undefined;\n")])])]),a("p",[e._v("在 .undefined 前添加 .not 。然而，通常最好断言目标等于它的期望值，而不是不等于 undefined")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.equal(1); // Recommended\nexpect(1).to.not.be.undefined; // Not recommended\n")])])]),a("p",[e._v("自定义错误消息可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(42, 'nooo why fail??').to.be.undefined;\n")])])]),a("h2",{attrs:{id:"nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nan"}},[e._v("#")]),e._v(" .NaN")]),e._v(" "),a("p",[e._v("断言目标严格地(===)等于NaN")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(NaN).to.be.NaN;\n")])])]),a("p",[e._v("在 .NaN 前添加 .not 。然而，通常最好断言目标等于它的期望值，而不是不等于 NaN")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foo').to.equal('foo'); // Recommended\nexpect('foo').to.not.be.NaN; // Not recommended\n")])])]),a("p",[e._v("自定义错误消息可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(42, 'nooo why fail??').to.be.NaN;\n")])])]),a("h2",{attrs:{id:"exist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exist"}},[e._v("#")]),e._v(" .exist")]),e._v(" "),a("p",[e._v("断言目标严格地(===)不等于null或undefined。然而，通常最好断言目标等于它的期望值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.equal(1); // Recommended\nexpect(1).to.exist; // Not recommended\n\nexpect(0).to.equal(0); // Recommended\nexpect(0).to.exist; // Not recommended\n")])])]),a("p",[e._v("在 .exist 前添加 .not")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(null).to.be.null; // Recommended\nexpect(null).to.not.exist; // Not recommended\n\nexpect(undefined).to.be.undefined; // Recommended\nexpect(undefined).to.not.exist; // Not recommended\n")])])]),a("p",[e._v("自定义错误消息可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(null, 'nooo why fail??').to.be.exist;\n")])])]),a("h2",{attrs:{id:"empty"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#empty"}},[e._v("#")]),e._v(" .empty")]),e._v(" "),a("p",[e._v("当目标是字符串或数组时，.empty断言目标的length属性严格地(===)等于0")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([]).to.be.empty;\nexpect('').to.be.empty;\n")])])]),a("p",[e._v("当目标是映射或集合时，.empty断言目标的size属性严格等于0")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(new Set()).to.be.empty;\nexpect(new Map()).to.be.empty;\n")])])]),a("p",[e._v("当目标是非函数对象时，.empty断言目标没有任何自己的可枚举属性。基于符号键的属性将被排除在计数之外")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({}).to.be.empty;\n")])])]),a("p",[e._v("因为.empty根据目标的类型执行不同的操作，所以在使用.empty之前检查目标的类型非常重要")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([]).to.be.an('array').that.is.empty;\n")])])]),a("p",[e._v("在链的前面添加.not来否定.empty。然而，通常最好是断言目标包含预期值的数量，而不是断言它不是空的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\nexpect([1, 2, 3]).to.not.be.empty; // Not recommended\n\nexpect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\nexpect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n\nexpect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\nexpect({a: 1}).to.not.be.empty; // Not recommended\n")])])]),a("p",[e._v("自定义错误消息可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n")])])]),a("h2",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[e._v("#")]),e._v(" .arguments")]),e._v(" "),a("p",[e._v("断言目标是arguments对象")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function test () {\n  expect(arguments).to.be.arguments;\n}\n\ntest();\n")])])]),a("p",[e._v("在链的前面添加.not来否定.arguments。然而，通常最好是断言预期的目标类型，而不是断言它不是arguments对象")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foo').to.be.a('string'); // Recommended\nexpect('foo').to.not.be.arguments; // Not recommended\n")])])]),a("p",[e._v("自定义错误消息可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({}, 'nooo why fail??').to.be.arguments;\n")])])]),a("p",[e._v("别名.Arguments可以与.Arguments互换使用")]),e._v(" "),a("h2",{attrs:{id:"equal-val-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#equal-val-msg"}},[e._v("#")]),e._v(" .equal(val[,msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Mixed } val")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标严格地(===)等于给定的val")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.equal(1);\nexpect('foo').to.equal('foo');\n")])])]),a("p",[e._v("在链的前面添加.deep来使用deep等式")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Target object deeply (but not strictly) equals `{a: 1}`\nexpect({a: 1}).to.deep.equal({a: 1});\nexpect({a: 1}).to.not.equal({a: 1});\n\n// Target array deeply (but not strictly) equals `[1, 2]`\nexpect([1, 2]).to.deep.equal([1, 2]);\nexpect([1, 2]).to.not.equal([1, 2]);\n")])])]),a("p",[e._v("在链的前面加上。而不是减去。等号。然而，通常最好断言目标等于它的期望值，而不是不等于无数个意外值中的一个")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.equal(1); // Recommended\nexpect(1).to.not.equal(2); // Not recommended\n")])])]),a("p",[e._v(".equal接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.equal(2, 'nooo why fail??');\nexpect(1, 'nooo why fail??').to.equal(2);\n")])])]),a("p",[e._v("别名.equals和eq可以与.equal互换使用")]),e._v(" "),a("h2",{attrs:{id:"eql-obj-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eql-obj-msg"}},[e._v("#")]),e._v(" .eql(obj[,msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Mixed } obj")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标与给定的obj深度相等")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Target object is deeply (but not strictly) equal to {a: 1}\nexpect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n\n// Target array is deeply (but not strictly) equal to [1, 2]\nexpect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n")])])]),a("p",[e._v("在链的前面添加.not来否定.eql。然而，通常最好是断言目标与它的期望值相当，而不是与无数个意想不到的值之一相当")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}).to.eql({a: 1}); // Recommended\nexpect({a: 1}).to.not.eql({b: 2}); // Not recommended\n")])])]),a("p",[e._v(".eql接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\nexpect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n")])])]),a("p",[e._v("别名.eqls可以与.eql互换使用")]),e._v(" "),a("p",[e._v(".deep.equal断言几乎与.eql相同，但有一个不同之处:.deep.equal会导致对链中随后的任何其他断言也使用深度相等比较")]),e._v(" "),a("h2",{attrs:{id:"above-n-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#above-n-msg"}},[e._v("#")]),e._v(" .above(n[,msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Number } n")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标是一个数字或一个日期，分别大于给定的数字或日期n。然而，通常最好断言目标等于它的期望值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(2).to.equal(2); // Recommended\nexpect(2).to.be.above(1); // Not recommended\n")])])]),a("p",[e._v("在链的前面添加.lengthOf，以断言目标的长度或大小大于给定的数字n")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foo').to.have.lengthOf(3); // Recommended\nexpect('foo').to.have.lengthOf.above(2); // Not recommended\n\nexpect([1, 2, 3]).to.have.lengthOf(3); // Recommended\nexpect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n")])])]),a("p",[e._v("在链的前面添加.not来抵消.above")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(2).to.equal(2); // Recommended\nexpect(1).to.not.be.above(2); // Not recommended\n")])])]),a("p",[e._v(".above接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.be.above(2, 'nooo why fail??');\nexpect(1, 'nooo why fail??').to.be.above(2);\n")])])]),a("p",[e._v("别名.gt和.greaterThan可以与.above互换使用")]),e._v(" "),a("h2",{attrs:{id:"least-n-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#least-n-msg"}},[e._v("#")]),e._v(" .least(n[,msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Number } n")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标是一个数字或日期，大于或等于给定的数字或日期n。然而，通常最好断言目标等于它的期望值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(2).to.equal(2); // Recommended\nexpect(2).to.be.at.least(1); // Not recommended\nexpect(2).to.be.at.least(2); // Not recommended\n")])])]),a("p",[e._v("在链的前面添加.lengthOf，以断言目标的长度或大小大于或等于给定的数字n")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foo').to.have.lengthOf(3); // Recommended\nexpect('foo').to.have.lengthOf.at.least(2); // Not recommended\n\nexpect([1, 2, 3]).to.have.lengthOf(3); // Recommended\nexpect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n")])])]),a("p",[e._v("在链的前面加上.not来抵消.least")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.equal(1); // Recommended\nexpect(1).to.not.be.at.least(2); // Not recommended\n")])])]),a("p",[e._v(".least接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.be.at.least(2, 'nooo why fail??');\nexpect(1, 'nooo why fail??').to.be.at.least(2);\n")])])]),a("p",[e._v("别名.gte可以与.least互换使用")]),e._v(" "),a("h2",{attrs:{id:"below-n-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#below-n-msg"}},[e._v("#")]),e._v(" .below(n[, msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Number } n")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标是一个数字或一个日期，分别小于给定的数字或日期n。然而，通常最好断言目标等于它的期望值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.equal(1); // Recommended\nexpect(1).to.be.below(2); // Not recommended\n")])])]),a("p",[e._v("在链的前面添加. lengthof，以断言目标的长度或大小小于给定的数字n")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foo').to.have.lengthOf(3); // Recommended\nexpect('foo').to.have.lengthOf.below(4); // Not recommended\n\nexpect([1, 2, 3]).to.have.length(3); // Recommended\nexpect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n")])])]),a("p",[e._v("在链的前面加上.not来抵消.below")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(2).to.equal(2); // Recommended\nexpect(2).to.not.be.below(1); // Not recommended\n")])])]),a("p",[e._v(".下面接受一个可选的msg参数，它是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(2).to.be.below(1, 'nooo why fail??');\nexpect(2, 'nooo why fail??').to.be.below(1);\n")])])]),a("p",[e._v("别名.lt和.lessThan可以与下面的.互换使用")]),e._v(" "),a("h2",{attrs:{id:"most-n-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#most-n-msg"}},[e._v("#")]),e._v(" .most(n[, msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Number } n")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标是一个数字或日期，分别小于或等于给定的数字或日期n。然而，通常最好断言目标等于它的期望值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.equal(1); // Recommended\nexpect(1).to.be.at.most(2); // Not recommended\nexpect(1).to.be.at.most(1); // Not recommended\n")])])]),a("p",[e._v("在链的前面添加.lengthOf，以断言目标的长度或大小小于或等于给定的数字n")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foo').to.have.lengthOf(3); // Recommended\nexpect('foo').to.have.lengthOf.at.most(4); // Not recommended\n\nexpect([1, 2, 3]).to.have.lengthOf(3); // Recommended\nexpect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n")])])]),a("p",[e._v("在链的前面加上.not来抵消.most")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(2).to.equal(2); // Recommended\nexpect(2).to.not.be.at.most(1); // Not recommended\n")])])]),a("p",[e._v(".most大多数情况下接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(2).to.be.at.most(1, 'nooo why fail??');\nexpect(2, 'nooo why fail??').to.be.at.most(1);\n")])])]),a("p",[e._v("别名.lte可以与.most互换使用")]),e._v(" "),a("h2",{attrs:{id:"within-start-finish-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#within-start-finish-msg"}},[e._v("#")]),e._v(" .within(start, finish[, msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Number } start lower bound inclusive")]),e._v(" "),a("li",[e._v("@param { Number } finish upper bound inclusive")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标是一个数字或日期，大于或等于给定的数字或日期开始，小于或等于给定的数字或日期结束。然而，通常最好断言目标等于它的期望值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(2).to.equal(2); // Recommended\nexpect(2).to.be.within(1, 3); // Not recommended\nexpect(2).to.be.within(2, 3); // Not recommended\nexpect(2).to.be.within(1, 2); // Not recommended\n")])])]),a("p",[e._v("在链的前面添加.lengthOf，以断言目标的长度或大小大于或等于给定的数字start，小于或等于给定的数字finish")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foo').to.have.lengthOf(3); // Recommended\nexpect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n\nexpect([1, 2, 3]).to.have.lengthOf(3); // Recommended\nexpect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n")])])]),a("p",[e._v("在链的前面添加.not来否定.within")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.equal(1); // Recommended\nexpect(1).to.not.be.within(2, 4); // Not recommended\n")])])]),a("p",[e._v(".within接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(4).to.be.within(1, 3, 'nooo why fail??');\nexpect(4, 'nooo why fail??').to.be.within(1, 3);\n")])])]),a("h2",{attrs:{id:"instanceof-constructor-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-constructor-msg"}},[e._v("#")]),e._v(" .instanceof(constructor[, msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Constructor } constructor")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标是给定构造函数的实例")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Cat () { }\n\nexpect(new Cat()).to.be.an.instanceof(Cat);\nexpect([1, 2]).to.be.an.instanceof(Array);\n")])])]),a("p",[e._v("在链的前面添加.not来否定.instanceof")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}).to.not.be.an.instanceof(Array);\n")])])]),a("p",[e._v(".instanceof接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\nexpect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n")])])]),a("p",[e._v("由于ES5中的限制，.instanceof在使用Babel或TypeScript之类的换行器时可能并不总是像预期的那样工作。特别是，当子类化内置对象(如Array、Error和Map)时，可能会产生意想不到的结果")]),e._v(" "),a("p",[e._v("别名.instanceOf可以与.instanceOf互换使用")]),e._v(" "),a("h2",{attrs:{id:"property-name-val-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#property-name-val-msg"}},[e._v("#")]),e._v(" .property(name[, val[, msg]])")]),e._v(" "),a("ul",[a("li",[e._v("@param { String } name")]),e._v(" "),a("li",[e._v("@param { Mixed } val (optional)")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标具有具有给定键名的属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}).to.have.property('a');\n")])])]),a("p",[e._v("当提供val时，.property还断言属性的值等于给定的val")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}).to.have.property('a', 1);\n")])])]),a("p",[e._v("默认情况下，使用strict(===)等式。在链的前面添加.deep来使用deep等式")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Target object deeply (but not strictly) has property `x: {a: 1}`\nexpect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\nexpect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n")])])]),a("p",[e._v("搜索中始终包含目标的可枚举和不可枚举属性。默认情况下，包括own和inherit属性。在链的前面添加.own，以从搜索中排除继承的属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Object.prototype.b = 2;\n\nexpect({a: 1}).to.have.own.property('a');\nexpect({a: 1}).to.have.own.property('a', 1);\nexpect({a: 1}).to.have.property('b');\nexpect({a: 1}).to.not.have.own.property('b');\n")])])]),a("p",[e._v(".deep和.own可以组合在一起")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n")])])]),a("p",[e._v("在链的前面添加.nested，以便在引用嵌套属性时启用点符号和括号符号")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\nexpect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n")])])]),a("p",[e._v("如果.或[]是实际属性名称的一部分，可以通过在它们前面添加两个反斜杠来转义它们")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n")])])]),a("p",[e._v(".deep和.nested 可以结合使用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: {b: [{c: 3}]}})\n  .to.have.deep.nested.property('a.b[0]', {c: 3});\n")])])]),a("p",[e._v(".own 与 .nested 不可以结合使用")]),e._v(" "),a("p",[e._v("使用 .not 否定 .property")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}).to.not.have.property('b');\n")])])]),a("p",[e._v("然而,当提供val否定.property是很危险的。问题是,它创造了不确定性预期通过断言目标没有一个属性与给定的键名,或者它有一个属性与给定键的名字,但它的价值不等于给定的val。它通常是最好的选择来确定的预期的输出,然后写一个断言,只有承认准确输出")]),e._v(" "),a("p",[e._v("当预期目标不具有具有给定键名的属性时，通常最好准确地断言该属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({b: 2}).to.not.have.property('a'); // Recommended\nexpect({b: 2}).to.not.have.property('a', 1); // Not recommended\n")])])]),a("p",[e._v("当预期目标具有具有给定键名的属性时，通常最好断言该属性具有其期望值，而不是断言它没有许多未预料到的值之一")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 3}).to.have.property('a', 3); // Recommended\nexpect({a: 3}).to.not.have.property('a', 1); // Not recommended\n")])])]),a("p",[e._v("属性将链中随后的任何断言的目标更改为原始目标对象的属性值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}).to.have.property('a').that.is.a('number');\n")])])]),a("p",[e._v("属性接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出。当不提供val时，只使用第二种形式")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Recommended\nexpect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\nexpect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\nexpect({a: 1}, 'nooo why fail??').to.have.property('b');\n\n// Not recommended\nexpect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n")])])]),a("p",[e._v("上面的断言与不提供val不是一回事，相反，它断言目标对象有一个b属性，它等于undefined。\n断言.ownProperty和. has ownproperty可以与.own.property互换使用")]),e._v(" "),a("h2",{attrs:{id:"ownpropertydescriptor-name-descriptor-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ownpropertydescriptor-name-descriptor-msg"}},[e._v("#")]),e._v(" .ownPropertyDescriptor(name[, descriptor[, msg]])")]),e._v(" "),a("ul",[a("li",[e._v("@param { String } name")]),e._v(" "),a("li",[e._v("@param { Object } descriptor "),a("em",[e._v("optional")])]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标具有自己的具有给定键名的属性描述符。搜索中包括可枚举和不可枚举属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}).to.have.ownPropertyDescriptor('a');\n")])])]),a("p",[e._v("当提供描述符时，. ownpropertydescriptor还断言属性的描述符与给定的描述符深度相等")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: 1,\n});\n")])])]),a("p",[e._v("在链的前面添加.not来否定.ownPropertyDescriptor")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n")])])]),a("p",[e._v("但是，在提供描述符时否定. ownpropertydescriptor是很危险的。问题是，它通过断言目标没有具有给定键名的属性描述符，或者它确实具有具有给定键名的属性描述符，但它并不完全等于给定的描述符，从而产生了不确定的预期。通常，最好确定预期的确切输出，然后编写只接受该确切输出的断言。\n当目标不期望具有具有给定键名的属性描述符时，通常最好准确地断言该属性描述符。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Recommended\nexpect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n\n// Not recommended\nexpect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: 1,\n});\n")])])]),a("p",[e._v("当预期目标具有具有给定键名的属性描述符时，通常最好断言该属性具有其预期的描述符，而不是断言它没有许多未预料到的描述符之一")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Recommended\nexpect({a: 3}).to.have.ownPropertyDescriptor('a', {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: 3,\n});\n\n// Not recommended\nexpect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: 1,\n});\n")])])]),a("p",[e._v("ownpropertydescriptor将链中跟随的任何断言的目标更改为原始目标对象的属性描述符的值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}).to.have.ownPropertyDescriptor('a')\n  .that.has.property('enumerable', true);\n")])])]),a("p",[e._v("ownpropertydescriptor接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出。当不提供描述符时，只使用第二种形式")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Recommended\nexpect({a: 1}).to.have.ownPropertyDescriptor('a', {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: 2,\n}, 'nooo why fail??');\n\n// Recommended\nexpect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: 2,\n});\n\n// Recommended\nexpect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n\n// Not recommended\nexpect({a: 1})\n  .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n")])])]),a("p",[e._v("上面的断言与不提供描述符不是一回事。相反，它断言目标对象有一个深度等于undefined的b属性描述符。\n别名.haveOwnPropertyDescriptor可以与.ownPropertyDescriptor互换使用")]),e._v(" "),a("h2",{attrs:{id:"lengthof-n-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lengthof-n-msg"}},[e._v("#")]),e._v(" .lengthOf(n[, msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Number } n")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标的长度或大小等于给定的数字n")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([1, 2, 3]).to.have.lengthOf(3);\nexpect('foo').to.have.lengthOf(3);\nexpect(new Set([1, 2, 3])).to.have.lengthOf(3);\nexpect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n")])])]),a("p",[e._v("在链的前面加上 .not 否定 .lengthOf。然而，通常最好断言目标的length属性等于它的期望值，而不是不等于许多未预料到的值之一")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foo').to.have.lengthOf(3); // Recommended\nexpect('foo').to.not.have.lengthOf(4); // Not recommended\n")])])]),a("p",[e._v(".lengthof接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\nexpect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n")])])]),a("p",[e._v("lengthof也可以用作一个语言链，导致链中的所有.above、.below、.least、.most和.within断言都使用目标的length属性作为目标。但是，通常最好是断言目标的length属性等于它的预期长度，而不是断言它的length属性在某个值范围内")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Recommended\nexpect([1, 2, 3]).to.have.lengthOf(3);\n\n// Not recommended\nexpect([1, 2, 3]).to.have.lengthOf.above(2);\nexpect([1, 2, 3]).to.have.lengthOf.below(4);\nexpect([1, 2, 3]).to.have.lengthOf.at.least(3);\nexpect([1, 2, 3]).to.have.lengthOf.at.most(3);\nexpect([1, 2, 3]).to.have.lengthOf.within(2,4);\n")])])]),a("p",[e._v("由于兼容性问题，别名.length不能直接链接到未调用的方法，如.a。因此，.length在任何情况下都不能和.length互换使用。建议总是使用.lengthOf而不是.length")]),e._v(" "),a("h2",{attrs:{id:"match-re-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#match-re-msg"}},[e._v("#")]),e._v(" .match(re[, msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { RegExp } re")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标匹配给定的正则表达式re")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foobar').to.match(/^foo/);\n")])])]),a("p",[e._v("在链的前面添加.not来否定.match")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foobar').to.not.match(/taco/);\n")])])]),a("p",[e._v(".match接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foobar').to.match(/taco/, 'nooo why fail??');\nexpect('foobar', 'nooo why fail??').to.match(/taco/);\n")])])]),a("p",[e._v("别名.matches可以与.match互换使用")]),e._v(" "),a("h2",{attrs:{id:"string-str-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-str-msg"}},[e._v("#")]),e._v(" .string(str[, msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { String } str")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标字符串包含给定的子字符串str")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foobar').to.have.string('bar');\n")])])]),a("p",[e._v("在链的前面添加.not来否定.string")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foobar').to.not.have.string('taco');\n")])])]),a("p",[e._v(".string接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foobar').to.have.string('taco', 'nooo why fail??');\nexpect('foobar', 'nooo why fail??').to.have.string('taco');\n")])])]),a("h2",{attrs:{id:"keys-key1-key2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keys-key1-key2"}},[e._v("#")]),e._v(" .keys(key1[, key2[, …]])")]),e._v(" "),a("ul",[a("li",[e._v("@param { String | Array | Object } keys")])]),e._v(" "),a("p",[e._v("断言目标对象、数组、映射或集合具有给定的键。搜索中只包含目标自身的继承属性。\n当目标是对象或数组时，键可以作为一个或多个字符串参数、一个数组参数或一个对象参数提供。在后一种情况下，只有给定对象中的键起作用;这些值将被忽略")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\nexpect(['x', 'y']).to.have.all.keys(0, 1);\n\nexpect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\nexpect(['x', 'y']).to.have.all.keys([0, 1]);\n\nexpect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\nexpect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n")])])]),a("p",[e._v("当目标是映射或设置时，必须将每个键作为单独的参数提供")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\nexpect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n")])])]),a("p",[e._v("因为.keys根据目标的类型执行不同的操作，所以在使用.keys之前检查目标的类型非常重要")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n")])])]),a("p",[e._v("默认情况下，使用strict(===)等式比较映射和集合的键。在链的前面添加.deep来使用deep等式")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Target set deeply (but not strictly) has key `{a: 1}`\nexpect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\nexpect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n")])])]),a("p",[e._v("默认情况下，目标必须拥有所有给定的键，不能有更多。在链的前面添加.any，以只要求目标具有至少一个给定键。另外，在链的前面添加.not来否定.keys。通常，最好在否定.keys时添加.any，在断言.keys时使用.all而不进行否定。\n在否定.keys时，首选.any，因为.not.any。keys断言输出的确切期望，而.not.all。钥匙会产生不确定的预期")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Recommended; asserts that target doesn't have any of the given keys\nexpect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n\n// Not recommended; asserts that target doesn't have all of the given\n// keys but may or may not have some of them\nexpect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n")])])]),a("p",[e._v("在没有否定的情况下断言.keys时，.all是首选，因为.all.keys断言输出的确切内容，而.any。钥匙会产生不确定的预期\n在否定.keys时，首选.any，因为.not.any.keys断言输出的确切期望，而.not.all。钥匙会产生不确定的预期")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Recommended; asserts that target has all the given keys\nexpect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n\n// Not recommended; asserts that target has at least one of the given\n// keys but may or may not have more of them\nexpect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n")])])]),a("p",[e._v("注意，当.all和.any都没有出现在链的前面时，默认情况下使用.all。不过，通常最好还是添加.all，因为它提高了可读性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Both assertions are identical\nexpect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\nexpect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n")])])]),a("p",[e._v("在链的前面添加.include，要求目标的键是预期键的超集，而不是相同的键集")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Target object's keys are a superset of ['a', 'b'] but not identical\nexpect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\nexpect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n")])])]),a("p",[e._v("但是，如果.any和.include组合在一起，则只有.any生效。在本例中，.include被忽略")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Both assertions are identical\nexpect({a: 1}).to.have.any.keys('a', 'b');\nexpect({a: 1}).to.include.any.keys('a', 'b');\n")])])]),a("p",[e._v("自定义错误消息可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}, 'nooo why fail??').to.have.key('b');\n")])])]),a("p",[e._v("别名.key可以与.keys互换使用")]),e._v(" "),a("h2",{attrs:{id:"throw-errorlike-errmsgmatcher-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#throw-errorlike-errmsgmatcher-msg"}},[e._v("#")]),e._v(" .throw([errorLike], [errMsgMatcher], [msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Error | ErrorConstructor } errorLike")]),e._v(" "),a("li",[e._v("@param { String | RegExp } errMsgMatcher error message")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])]),e._v(" "),a("li",[e._v("@see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types")])]),e._v(" "),a("p",[e._v("当没有提供参数时，.throw调用目标函数并断言抛出了错误")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var badFn = function () { throw new TypeError('Illegal salmon!'); };\n\nexpect(badFn).to.throw();\n")])])]),a("p",[e._v("当提供了一个参数，它是一个错误构造函数时，.throw调用目标函数并断言抛出了一个错误，该错误是该错误构造函数的一个实例")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var badFn = function () { throw new TypeError('Illegal salmon!'); };\n\nexpect(badFn).to.throw(TypeError);\n")])])]),a("p",[e._v("当提供了一个参数，它是一个错误构造函数时，.throw调用目标函数并断言抛出了一个错误，该错误是这个错误构造函数的一个实例")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var err = new TypeError('Illegal salmon!');\nvar badFn = function () { throw err; };\n\nexpect(badFn).to.throw(err);\n")])])]),a("p",[e._v("当提供了一个参数(它是一个字符串)时，.throw调用目标函数并断言抛出了一个包含该字符串的消息的错误")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var badFn = function () { throw new TypeError('Illegal salmon!'); };\n\nexpect(badFn).to.throw('salmon');\n")])])]),a("p",[e._v("当提供了一个参数(它是一个正则表达式)时，.throw调用目标函数并断言抛出了一个错误，该错误带有一条匹配该正则表达式的消息")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var badFn = function () { throw new TypeError('Illegal salmon!'); };\n\nexpect(badFn).to.throw(/salmon/);\n")])])]),a("p",[e._v("当提供两个参数时，第一个参数是一个错误实例或构造函数，第二个参数是一个字符串或正则表达式，.throw调用该函数并断言抛出的错误满足了上述两种条件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var err = new TypeError('Illegal salmon!');\nvar badFn = function () { throw err; };\n\nexpect(badFn).to.throw(TypeError, 'salmon');\nexpect(badFn).to.throw(TypeError, /salmon/);\nexpect(badFn).to.throw(err, 'salmon');\nexpect(badFn).to.throw(err, /salmon/);\n")])])]),a("p",[e._v("在链的前面添加.not来否定.throw")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var goodFn = function () {};\n\nexpect(goodFn).to.not.throw();\n")])])]),a("p",[e._v("然而，在提供任何参数时否定.throw是危险的。问题是,它创造了不确定性预期通过断言目标不会抛出错误,或者它将抛出一个错误但比给定的类型,不同类型的给定类型的或它将抛出一个错误,但不包括给定字符串的消息。通常，最好确定预期的确切输出，然后编写只接受该确切输出的断言。\n当预期目标不会抛出错误时，最好准确地断言错误")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var goodFn = function () {};\n\nexpect(goodFn).to.not.throw(); // Recommended\nexpect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n")])])]),a("p",[e._v("当目标预计将抛出一个错误,最好经常声称其预期类型的错误,和有一个消息,包括预期的字符串,而不是声称它没有许多意想不到的类型之一,和没有消息,包括一些stringoutput。\n当预期目标不会抛出错误时，最好准确地断言错误")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var badFn = function () { throw new TypeError('Illegal salmon!'); };\n\nexpect(badFn).to.throw(TypeError, 'salmon'); // Recommended\nexpect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n")])])]),a("p",[e._v(".throw将链中随后的任何断言的目标更改为抛出的错误对象\n当预期目标不会抛出错误时，最好准确地断言错误")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var err = new TypeError('Illegal salmon!');\nerr.code = 42;\nvar badFn = function () { throw err; };\n\nexpect(badFn).to.throw(TypeError).with.property('code', 42);\n")])])]),a("p",[e._v(".throw接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出。当不提供两个参数时，始终使用第二种形式")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var goodFn = function () {};\n\nexpect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\nexpect(goodFn, 'nooo why fail??').to.throw();\n")])])]),a("p",[e._v("由于ES5中的限制，.throw在使用Babel或TypeScript等转换程序时，可能并不总是像预期的那样工作。特别是，当子类化内置错误对象，然后将子类化的构造函数传递给.throw时，可能会产生意想不到的结果\n使用抛出断言时要注意一些常见的错误。一个常见的错误是意外地自己调用函数，而不是让抛出断言为您调用函数。例如，当测试一个名为fn的函数是否抛出时，提供fn而不是fn()作为断言的目标")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(fn).to.throw();     // Good! Tests `fn` as desired\nexpect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n")])])]),a("p",[e._v("如果需要断言函数fn在传递某些参数时抛出，则在另一个函数中封装对fn的调用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(function () { fn(42); }).to.throw();  // Function expression\nexpect(() => fn(42)).to.throw();             // ES6 arrow function\n")])])]),a("p",[e._v("另一个常见错误是将对象方法(或依赖于此方法的任何独立函数)作为断言的目标。这样做是有问题的，因为当.throw调用函数时，这个上下文将会丢失;它不可能知道这是什么。有两种方法可以解决这个问题。一种解决方案是将方法或函数调用封装在另一个函数中。另一个解决方案是使用bind")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(function () { cat.meow(); }).to.throw();  // Function expression\nexpect(() => cat.meow()).to.throw();             // ES6 arrow function\nexpect(cat.meow.bind(cat)).to.throw();           // Bind\n")])])]),a("p",[e._v("最后，值得一提的是，JavaScript中的最佳实践是只抛出错误和派生错误，如ReferenceError、TypeError和扩展错误的用户定义对象。初始化时，没有其他类型的值会生成堆栈跟踪。尽管如此，抛出断言在技术上支持抛出任何类型的值，而不仅仅是错误及其派生。\n别名.Throw和.Throw可以与.Throw互换使用")]),e._v(" "),a("h2",{attrs:{id:"respondto-method-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#respondto-method-msg"}},[e._v("#")]),e._v(" .respondTo(method[, msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { String } method")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("当目标是非函数对象时，.respondto断言目标具有具有给定名称方法的方法。方法可以是自己的或继承的，也可以是可枚举的或不可枚举的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Cat () {}\nCat.prototype.meow = function () {};\n\nexpect(new Cat()).to.respondTo('meow');\n")])])]),a("p",[e._v("当目标是一个函数时，.respondto断言目标的prototype属性有一个具有给定name方法的方法。同样，方法可以是自己的或继承的，也可以是可枚举的或不可枚举的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Cat () {}\nCat.prototype.meow = function () {};\n\nexpect(Cat).to.respondTo('meow');\n")])])]),a("p",[e._v("在链的前面添加.self来强制.respondto将目标视为一个非函数对象，即使它是一个函数。因此，它断言目标具有具有给定名称方法的方法，而不是断言目标的prototype属性具有具有给定名称方法的方法")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Cat () {}\nCat.prototype.meow = function () {};\nCat.hiss = function () {};\n\nexpect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n")])])]),a("p",[e._v("当不添加.self时，在使用.respondto之前检查目标的类型是很重要的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Cat () {}\nCat.prototype.meow = function () {};\n\nexpect(new Cat()).to.be.an('object').that.respondsTo('meow');\n")])])]),a("p",[e._v("在链的前面添加.not来否定.respondTo")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Dog () {}\nDog.prototype.bark = function () {};\n\nexpect(new Dog()).to.not.respondTo('meow');\n")])])]),a("p",[e._v(".respondto接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({}).to.respondTo('meow', 'nooo why fail??');\nexpect({}, 'nooo why fail??').to.respondTo('meow');\n")])])]),a("p",[e._v("别名.respondsTo可以与.respondTo互换使用")]),e._v(" "),a("h2",{attrs:{id:"itself"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#itself"}},[e._v("#")]),e._v(" .itself")]),e._v(" "),a("p",[e._v("强制链中跟随的所有.respondto断言表现得好像目标是一个非函数对象，即使它是一个函数。因此，它导致.respondTo断言目标具有具有给定名称的方法，而不是断言目标的prototype属性具有具有给定名称的方法")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Cat () {}\nCat.prototype.meow = function () {};\nCat.hiss = function () {};\n\nexpect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n")])])]),a("h2",{attrs:{id:"satisfy-matcher-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#satisfy-matcher-msg"}},[e._v("#")]),e._v(" .satisfy(matcher[, msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Function } matcher")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("调用给定的matcher函数，将目标作为第一个参数传递，并断言返回的值是真实的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.satisfy(function(num) {\n  return num > 0;\n});\n")])])]),a("p",[e._v("在.satisfy前添加.not否定.satisfy")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.not.satisfy(function(num) {\n  return num > 2;\n});\n")])])]),a("p",[e._v(".satisfy接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.satisfy(function(num) {\n  return num > 2;\n}, 'nooo why fail??');\n\nexpect(1, 'nooo why fail??').to.satisfy(function(num) {\n  return num > 2;\n});\n")])])]),a("p",[e._v("别名.satisfy可以与.satisfy互换使用")]),e._v(" "),a("h2",{attrs:{id:"closeto-expected-delta-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#closeto-expected-delta-msg"}},[e._v("#")]),e._v(" .closeTo(expected, delta[, msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Number } expected")]),e._v(" "),a("li",[e._v("@param { Number } delta")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标是一个给定值的正负范围内的数字。然而，通常最好断言目标等于它的期望值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Recommended\nexpect(1.5).to.equal(1.5);\n\n// Not recommended\nexpect(1.5).to.be.closeTo(1, 0.5);\nexpect(1.5).to.be.closeTo(2, 0.5);\nexpect(1.5).to.be.closeTo(1, 1);\n")])])]),a("p",[e._v("在.closeTo前添加.not否定.closeTo")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1.5).to.equal(1.5); // Recommended\nexpect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n")])])]),a("p",[e._v(".close to接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\nexpect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n")])])]),a("p",[e._v("别名.nearly可以与.close互换使用")]),e._v(" "),a("h2",{attrs:{id:"members-set-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#members-set-msg"}},[e._v("#")]),e._v(" .members(set[, msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Array } set")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标数组具有与给定数组集相同的成员")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([1, 2, 3]).to.have.members([2, 1, 3]);\nexpect([1, 2, 2]).to.have.members([2, 1, 2]);\n")])])]),a("p",[e._v("默认情况下，使用strict(===)等式比较成员。在链的前面添加.deep来使用deep等式")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Target array deeply (but not strictly) has member `{a: 1}`\nexpect([{a: 1}]).to.have.deep.members([{a: 1}]);\nexpect([{a: 1}]).to.not.have.members([{a: 1}]);\n")])])]),a("p",[e._v("默认情况下，顺序并不重要。在链的前面添加.ordered，以要求成员以相同的顺序出现")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\nexpect([1, 2, 3]).to.have.members([2, 1, 3])\n  .but.not.ordered.members([2, 1, 3]);\n")])])]),a("p",[e._v("默认情况下，两个数组的大小必须相同。在链的前面添加.include，以要求目标成员是预期成员的超集。注意，当添加.include时，在子集中会忽略重复项")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Target array is a superset of [1, 2] but not identical\nexpect([1, 2, 3]).to.include.members([1, 2]);\nexpect([1, 2, 3]).to.not.have.members([1, 2]);\n\n// Duplicates in the subset are ignored\nexpect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n")])])]),a("p",[e._v(".deep、.ordered和.include都可以组合。但是，如果.include和.ordered组合在一起，则从两个数组的开头开始排序")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([{a: 1}, {b: 2}, {c: 3}])\n  .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n  .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n")])])]),a("p",[e._v("在链的前面添加.not以否定.members。然而，这样做是危险的。问题是，它断言目标数组不具有与给定数组集合相同的所有成员，但可能有也可能没有其中一些成员，从而产生了不确定的预期。通常，最好确定预期的确切输出，然后编写只接受该确切输出的断言")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\nexpect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n")])])]),a("p",[e._v(".members接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\nexpect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n")])])]),a("h2",{attrs:{id:"oneof-list-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oneof-list-msg"}},[e._v("#")]),e._v(" .oneOf(list[, msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Array.<*> } list")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("断言目标是给定数组列表的成员。然而，通常最好断言目标等于它的期望值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.equal(1); // Recommended\nexpect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n")])])]),a("p",[e._v("比较使用严格的等式(===)执行")]),e._v(" "),a("p",[e._v("在.oneOf前添加.not否定.oneOf")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.equal(1); // Recommended\nexpect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n")])])]),a("p",[e._v(".one接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\nexpect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n")])])]),a("h2",{attrs:{id:"change-subject-prop-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#change-subject-prop-msg"}},[e._v("#")]),e._v(" .change(subject[, prop[, msg]])")]),e._v(" "),a("ul",[a("li",[e._v("@param { String } subject")]),e._v(" "),a("li",[e._v("@param { String } prop name "),a("em",[e._v("optional")])]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("当提供一个参数时，.change断言给定的函数subject在调用目标函数之前返回的值与在调用目标函数之后返回的值不同。然而，通常最好是断言subject等于它的期望值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var dots = ''\n  , addDot = function () { dots += '.'; }\n  , getDots = function () { return dots; };\n\n// Recommended\nexpect(getDots()).to.equal('');\naddDot();\nexpect(getDots()).to.equal('.');\n\n// Not recommended\nexpect(addDot).to.change(getDots);\n")])])]),a("p",[e._v("当提供两个参数时，.change断言给定对象主体的prop属性的值在调用目标函数之前与调用之后是不同的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {dots: ''}\n  , addDot = function () { myObj.dots += '.'; };\n\n// Recommended\nexpect(myObj).to.have.property('dots', '');\naddDot();\nexpect(myObj).to.have.property('dots', '.');\n\n// Not recommended\nexpect(addDot).to.change(myObj, 'dots');\n")])])]),a("p",[e._v("Strict(===)等式用于比较前后值")]),e._v(" "),a("p",[e._v("在.change前添加.not否定.change")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var dots = ''\n  , noop = function () {}\n  , getDots = function () { return dots; };\n\nexpect(noop).to.not.change(getDots);\n\nvar myObj = {dots: ''}\n  , noop = function () {};\n\nexpect(noop).to.not.change(myObj, 'dots');\n")])])]),a("p",[e._v(".change接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出。当不提供两个参数时，始终使用第二种形式")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {dots: ''}\n  , addDot = function () { myObj.dots += '.'; };\n\nexpect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n\nvar dots = ''\n  , addDot = function () { dots += '.'; }\n  , getDots = function () { return dots; };\n\nexpect(addDot, 'nooo why fail??').to.not.change(getDots);\n")])])]),a("p",[e._v(".change还通过链中的所有.by断言断言一个数字主题增加或减少了多少。但是，使用.change.by是很危险的。问题是，它通过断言主体要么增加给定的增量，要么减少给定的增量，从而产生不确定的预期。通常，最好确定预期的确切输出，然后编写只接受该确切输出的断言")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {val: 1}\n  , addTwo = function () { myObj.val += 2; }\n  , subtractTwo = function () { myObj.val -= 2; };\n\nexpect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\nexpect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n\nexpect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\nexpect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n")])])]),a("p",[e._v("别名.changes可以与.change互换使用")]),e._v(" "),a("h2",{attrs:{id:"increase-subject-prop-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#increase-subject-prop-msg"}},[e._v("#")]),e._v(" .increase(subject[, prop[, msg]])")]),e._v(" "),a("ul",[a("li",[e._v("@param { String | Function } subject")]),e._v(" "),a("li",[e._v("@param { String } prop name "),a("em",[e._v("optional")])]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("提供一个参数时,.increase断言给定的函数对象返回更多的时候调用在调用目标函数相对于事先的时候调用。.increase也导致链中的基本观点断言遵循断言返回的数字是大多少。通常，最好是断言返回值增加了预期的数量，而不是断言它增加了任何数量")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var val = 1\n  , addTwo = function () { val += 2; }\n  , getVal = function () { return val; };\n\nexpect(addTwo).to.increase(getVal).by(2); // Recommended\nexpect(addTwo).to.increase(getVal); // Not recommended\n")])])]),a("p",[e._v("当提供两个参数时，.increase断言在调用目标函数后，给定对象主体的prop属性的值要比调用前大")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {val: 1}\n  , addTwo = function () { myObj.val += 2; };\n\nexpect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\nexpect(addTwo).to.increase(myObj, 'val'); // Not recommended\n")])])]),a("p",[e._v("在链的前面添加.not来抵消.increase。然而，这样做是危险的。问题在于，它通过断言主题要么减少，要么保持不变，从而产生了不确定的预期。通常，最好确定预期的确切输出，然后编写只接受该确切输出的断言。\n当预期主题减少时，通常最好断言它减少了预期的数量")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {val: 1}\n  , subtractTwo = function () { myObj.val -= 2; };\n\nexpect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\nexpect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n")])])]),a("p",[e._v("当主题被期望保持不变时，最好准确地断言这一点\n当预期主题减少时，通常最好断言它减少了预期的数量")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {val: 1}\n  , noop = function () {};\n\nexpect(noop).to.not.change(myObj, 'val'); // Recommended\nexpect(noop).to.not.increase(myObj, 'val'); // Not recommended\n")])])]),a("p",[e._v(".increase接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出。当不提供两个参数时，始终使用第二种形式")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {val: 1}\n  , noop = function () {};\n\nexpect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n\nvar val = 1\n  , noop = function () {}\n  , getVal = function () { return val; };\n\nexpect(noop, 'nooo why fail??').to.increase(getVal);\n")])])]),a("p",[e._v("别名.increase可以与.increase互换使用")]),e._v(" "),a("h2",{attrs:{id:"decrease-subject-prop-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#decrease-subject-prop-msg"}},[e._v("#")]),e._v(" .decrease(subject[, prop[, msg]])")]),e._v(" "),a("ul",[a("li",[e._v("@param { String | Function } subject")]),e._v(" "),a("li",[e._v("@param { String } prop name "),a("em",[e._v("optional")])]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("提供一个参数时,.decrease断言给定的函数对象返回一个较小的数量的时候调用在调用目标函数相对于事先的时候调用。.decrease也导致链中的基本观点断言遵循坚持返回小数量的多少。通常，最好是断言返回值减少了预期的数量，而不是断言它减少了任何数量")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var val = 1\n  , subtractTwo = function () { val -= 2; }\n  , getVal = function () { return val; };\n\nexpect(subtractTwo).to.decrease(getVal).by(2); // Recommended\nexpect(subtractTwo).to.decrease(getVal); // Not recommended\n")])])]),a("p",[e._v("当提供两个参数时，. reduce断言在调用目标函数之后，给定对象主体的prop属性的值比调用之前的值要小")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {val: 1}\n  , subtractTwo = function () { myObj.val -= 2; };\n\nexpect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\nexpect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n")])])]),a("p",[e._v("在链的前面加上.not否定.reduce。然而，这样做是危险的。问题在于，它通过断言主题要么增加，要么保持不变，从而产生了不确定的预期。通常，最好确定预期的确切输出，然后编写只接受该确切输出的断言。\n当预期主题会增加时，通常最好断言它增加了预期的数量")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {val: 1}\n  , addTwo = function () { myObj.val += 2; };\n\nexpect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\nexpect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n")])])]),a("p",[e._v("当主题被期望保持不变时，最好准确地断言这一点\n当预期主题会增加时，通常最好断言它增加了预期的数量")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {val: 1}\n  , noop = function () {};\n\nexpect(noop).to.not.change(myObj, 'val'); // Recommended\nexpect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n")])])]),a("p",[e._v("reduce接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出。当不提供两个参数时，始终使用第二种形式")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {val: 1}\n  , noop = function () {};\n\nexpect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n\nvar val = 1\n  , noop = function () {}\n  , getVal = function () { return val; };\n\nexpect(noop, 'nooo why fail??').to.decrease(getVal);\n")])])]),a("p",[e._v("别名.reduction可以与.reduction互换使用")]),e._v(" "),a("h2",{attrs:{id:"by-delta-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#by-delta-msg"}},[e._v("#")]),e._v(" .by(delta[, msg])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Number } delta")]),e._v(" "),a("li",[e._v("@param { String } msg "),a("em",[e._v("optional")])])]),e._v(" "),a("p",[e._v("当在链中跟随.increase断言时，.by断言.increase断言的主题增加了给定的增量")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {val: 1}\n  , addTwo = function () { myObj.val += 2; };\n\nexpect(addTwo).to.increase(myObj, 'val').by(2);\n")])])]),a("p",[e._v("当在链中跟随.reduce断言时，.by断言.reduce断言的主语减少了给定的增量")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {val: 1}\n  , subtractTwo = function () { myObj.val -= 2; };\n\nexpect(subtractTwo).to.decrease(myObj, 'val').by(2);\n")])])]),a("p",[e._v("当在链中跟随.change断言时，.by断言.change断言的主题增加或减少了给定的增量。但是，使用.change.by是很危险的。问题在于，它带来了不确定的预期。通常，最好确定预期的确切输出，然后编写只接受该确切输出的断言")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {val: 1}\n  , addTwo = function () { myObj.val += 2; }\n  , subtractTwo = function () { myObj.val -= 2; };\n\nexpect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\nexpect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n\nexpect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\nexpect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n")])])]),a("p",[e._v("添加.not在.by前否定.by。然而，通常最好是断言主题根据预期的增量进行了更改，而不是断言它没有通过无数个意外增量中的一个进行更改")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {val: 1}\n  , addTwo = function () { myObj.val += 2; };\n\n// Recommended\nexpect(addTwo).to.increase(myObj, 'val').by(2);\n\n// Not recommended\nexpect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n")])])]),a("p",[e._v(".by接受一个可选的msg参数，该参数是一个自定义错误消息，用于在断言失败时显示。消息也可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myObj = {val: 1}\n  , addTwo = function () { myObj.val += 2; };\n\nexpect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\nexpect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n")])])]),a("h2",{attrs:{id:"extensible"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extensible"}},[e._v("#")]),e._v(" .extensible")]),e._v(" "),a("p",[e._v("断言目标是可扩展的，这意味着可以向其添加新属性。原语是不可扩展的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}).to.be.extensible;\n")])])]),a("p",[e._v("添加.not在.extensible前否定.extensible")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var nonExtensibleObject = Object.preventExtensions({})\n  , sealedObject = Object.seal({})\n  , frozenObject = Object.freeze({});\n\nexpect(nonExtensibleObject).to.not.be.extensible;\nexpect(sealedObject).to.not.be.extensible;\nexpect(frozenObject).to.not.be.extensible;\nexpect(1).to.not.be.extensible;\n")])])]),a("p",[e._v("自定义错误消息可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1, 'nooo why fail??').to.be.extensible;\n.sealed\n")])])]),a("h2",{attrs:{id:"sealed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sealed"}},[e._v("#")]),e._v(" .sealed")]),e._v(" "),a("p",[e._v("断言目标是密封的，这意味着不能向其添加新属性，也不能重新配置或删除其现有属性。但是，它现有的属性仍然可以重新分配到不同的值。原语总是密封的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\n\nexpect(sealedObject).to.be.sealed;\nexpect(frozenObject).to.be.sealed;\nexpect(1).to.be.sealed;\n")])])]),a("p",[e._v("添加.not在.sealed前否定.sealed")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}).to.not.be.sealed;\n")])])]),a("p",[e._v("自定义错误消息可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}, 'nooo why fail??').to.be.sealed;\n")])])]),a("h2",{attrs:{id:"frozen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#frozen"}},[e._v("#")]),e._v(" .frozen")]),e._v(" "),a("p",[e._v("断言目标被冻结，这意味着不能向其添加新属性，并且不能将其现有属性重新分配到不同的值、重新配置或删除。原语总是被冻结的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var frozenObject = Object.freeze({});\n\nexpect(frozenObject).to.be.frozen;\nexpect(1).to.be.frozen;\n")])])]),a("p",[e._v("添加.not在.frozen前否定.frozen")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}).to.not.be.frozen;\n")])])]),a("p",[e._v("自定义错误消息可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect({a: 1}, 'nooo why fail??').to.be.frozen;\n")])])]),a("h2",{attrs:{id:"finite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finite"}},[e._v("#")]),e._v(" .finite")]),e._v(" "),a("p",[e._v("断言目标是一个数字，而不是NaN或正/负无穷大")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(1).to.be.finite;\n")])])]),a("p",[e._v("在链的前面加上。而不是减去。limited。然而，这样做是危险的。问题是，它通过断言主语不是一个数字，或者是NaN，或者是正无穷，或者是负无穷，来产生不确定的预期。通常，最好确定预期的确切输出，然后编写只接受该确切输出的断言。\n当预期目标不是一个数字时，通常最好断言它是预期的类型，而不是断言它不是许多意外类型之一")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foo').to.be.a('string'); // Recommended\nexpect('foo').to.not.be.finite; // Not recommended\n")])])]),a("p",[e._v("当预期目标是NaN时，通常最好准确地断言这一点")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(NaN).to.be.NaN; // Recommended\nexpect(NaN).to.not.be.finite; // Not recommended\n")])])]),a("p",[e._v("当目标被期望为正无穷时，最好准确地断言")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(Infinity).to.equal(Infinity); // Recommended\nexpect(Infinity).to.not.be.finite; // Not recommended\n")])])]),a("p",[e._v("当目标被期望为负无穷时，最好准确地断言")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect(-Infinity).to.equal(-Infinity); // Recommended\nexpect(-Infinity).to.not.be.finite; // Not recommended\n")])])]),a("p",[e._v("自定义错误消息可以作为第二个参数给出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("expect('foo', 'nooo why fail??').to.be.finite;\n")])])]),a("h2",{attrs:{id:"fail-message"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fail-message"}},[e._v("#")]),e._v(" .fail([message])")]),e._v(" "),a("h2",{attrs:{id:"fail-actual-expected-message-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fail-actual-expected-message-operator"}},[e._v("#")]),e._v(" .fail(actual, expected, [message], [operator])")]),e._v(" "),a("ul",[a("li",[e._v("@param { Mixed } actual")]),e._v(" "),a("li",[e._v("@param { Mixed } expected")]),e._v(" "),a("li",[e._v("@param { String } message")]),e._v(" "),a("li",[e._v("@param { String } operator")])]),e._v(" "),a("p",[e._v("抛出一个失败")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('expect.fail();\nexpect.fail("custom error message");\nexpect.fail(1, 2);\nexpect.fail(1, 2, "custom error message");\nexpect.fail(1, 2, "custom error message", ">");\nexpect.fail(1, 2, undefined, ">");\n')])])])])}),[],!1,null,null,null);t.default=n.exports}}]);